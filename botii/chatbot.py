import re
import random
import webbrowser
import requests
import json
from datetime import datetime
import locale

try:
    locale.setlocale(locale.LC_TIME, 'russian')
except:
    locale.setlocale(locale.LC_TIME, 'russian')


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = '3e4a1d7fbe47b282c514cacdd5f7f5fd'
LOG_FILE = 'D:/PyCharm Community Edition 2024.2.4/botii/chat_log.txt'
USER_DATA_FILE = 'user_data.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try:
    with open(USER_DATA_FILE, 'r') as f:
        user_data = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    user_data = {'name': None}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_data():
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f)


responses = {
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    r"–ø—Ä–∏–≤–µ—Ç|–∫—É|—Ö–∞–π|–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–ø—Ä–∏–≤–µ—Ç–∏–∫": [
        lambda: f"–ü—Ä–∏–≤–µ—Ç{', ' + user_data['name'] if user_data['name'] else ''}! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
        lambda: f"–ü—Ä–∏–≤–µ—Ç{', ' + user_data['name'] if user_data['name'] else ''}, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ô–æ—É, —á–µ –∫–∞–∫?"
    ],

    # –û –±–æ—Ç–µ
    r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç\??|–∫—Ç–æ —Ç—ã\??|—Ç—ã —á–µ–ª–æ–≤–µ–∫\??|—Ç—ã —Ä–æ–±–æ—Ç\??": [
        "–Ø –ë–æ—Ç",
        "–Ø –±–æ—Ç, –º–µ–Ω—è —Å–æ–∑–¥–∞–ª–∞ –∫—Ä—É—Ç–∞—è, —Å–º–µ—à–Ω–∞—è, –æ—á–µ–Ω—å –∏ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–∞—è –ó–µ–ª–µ–Ω–æ–≤–∞ –°–æ—Ñ—å—è –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞ <3"
    ],

    # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    r"–º–µ–Ω—è –∑–æ–≤—É—Ç (.+)|–º–æ–µ –∏–º—è (.+)": [
        lambda match: f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {match.group(1) or match.group(2)}! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–µ –∏–º—è." +
                      ("" if user_data.get('name') else " –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏."),
    ],

    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    r"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??|—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å\??": [
        "–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å: '–ü–æ–∏—Å–∫ –∫–æ—Ç–∏–∫–∏', '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ' –∏–ª–∏ '5 –ø–ª—é—Å 3'"
    ],

    # –ö–∞–∫ –¥–µ–ª–∞
    r"–∫–∞–∫ –¥–µ–ª–∞\??|–∫–∞–∫ —Ç—ã\??|–∫–∞–∫ –∂–∏–∑–Ω—å\??": [
        lambda: f"–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ{', ' + user_data['name'] + '!' if user_data['name'] else '!'}",
        "–ö–∞–∫ —É —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å? –ù–æ—Ä–º–∞–ª—å–Ω–æ :)",
        "–õ—É—á—à–µ –≤—Å–µ—Ö, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª!"
    ],

    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    r"–≤—Å–µ —Ö–æ—Ä–æ—à–æ|–≥—É–¥|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä|–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ|–ª—É—á—à–µ –≤—Å–µ—Ö|—á–µ—Ç–∫–æ": [
        "–û, —è —Ä–∞–¥!",
        "–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!",
        "–Ø –∏ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–ª—Å—è!"
    ],

    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    r"–≤—Å–µ –ø–ª–æ—Ö–æ|–Ω–µ –æ—á|–±–µ|–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ|—è —Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å|—É–∂–∞—Å–Ω–æ|–≤—Å–µ —Ç–ª–µ–Ω": [
        "–≠—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ(",
        "–û, –Ω–µ—Ç, –¥–µ—Ä–∂–∏—Å—å, —è —Å —Ç–æ–±–æ–π(",
        "–•–≤–∞—Ç–∏—Ç –Ω—ã—Ç—å!!! –í–æ–∑—å–º–∏ —Å–µ–±—è –≤ —Ä—É–∫–∏!!!"
    ],

    # –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    r"–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å\??|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏\??|—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è|—Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏|–≤—Ä–µ–º—è": [
        lambda: f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}",
        lambda: f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    ],

    r"–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ\??|–∫–∞–∫–∞—è –¥–∞—Ç–∞\??|—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞|—á–∏—Å–ª–æ|–¥–∞—Ç–∞": [
        lambda: f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}",
        lambda: f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {datetime.now().strftime('%A, %d %B %Y')}"
    ],

    # –ü—Ä–æ—â–∞–Ω–∏–µ
    r"–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–≤—ã—Ö–æ–¥": [
        lambda: f"–ü–æ–∫–∞{', ' + user_data['name'] + '!' if user_data['name'] else '!'}",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
        "–£–≤–∏–¥–∏–º—Å—è!"
    ]
}


def log_conversation(user_input, bot_response):
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"[{timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n")
        f.write(f"[{timestamp}] –ë–æ—Ç: {bot_response}\n\n")


def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            weather_data = {
                'city': data['name'],
                'temp': round(data['main']['temp'], 1),
                'feels_like': round(data['main']['feels_like'], 1),
                'description': data['weather'][0]['description'],
                'humidity': data['main']['humidity'],
                'wind_speed': data['wind']['speed'],
                'icon': data['weather'][0]['icon']
            }

            weather_icons = {
                '01': '‚òÄÔ∏è', '02': '‚õÖ', '03': '‚òÅÔ∏è', '04': '‚òÅÔ∏è',
                '09': 'üåßÔ∏è', '10': 'üå¶Ô∏è', '11': '‚õàÔ∏è',
                '13': '‚ùÑÔ∏è', '50': 'üå´Ô∏è'
            }
            icon_code = weather_data['icon'][:2]
            icon = weather_icons.get(icon_code, '')

            return (f"{icon} –ü–æ–≥–æ–¥–∞ {weather_data['city']}:\n"
                    f"‚Ä¢ {weather_data['description'].capitalize()}\n"
                    f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']}¬∞C)\n"
                    f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                    f"‚Ä¢ –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å")

        elif response.status_code == 404:
            return f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        else:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ö–æ–¥: {response.status_code}"

    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


def calculate_expression(text):
    try:
        match = re.search(r'(\d+)\s*([\+\-\*/])\s*(\d+)', text)
        if match:
            num1 = int(match.group(1))
            operator = match.group(2)
            num2 = int(match.group(3))

            operations = {
                '+': ('+', num1 + num2),
                '-': ('-', num1 - num2),
                '*': ('*', num1 * num2),
                '/': (':', num1 / num2 if num2 != 0 else None)
            }

            if operator in operations:
                op_name, result = operations[operator]
                if result is None:
                    return "–¢—ã —á–µ–≥–æ? –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"
                return f"{num1} {op_name} {num2} = {result}"
        return None
    except Exception as e:
        return None


def chatbot_response(text):
    text = text.lower().strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name_match = re.search(r"–º–µ–Ω—è –∑–æ–≤—É—Ç (.+)|–º–æ–µ –∏–º—è (.+)", text)
    if name_match:
        new_name = name_match.group(1) or name_match.group(2)
        if new_name.lower() not in ['–≤—ã—Ö–æ–¥', '–ø–æ–∫–∞']:  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            user_data['name'] = new_name
            save_user_data()
            for pattern in responses:
                if re.search(r"–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è", pattern):
                    return random.choice([resp(name_match) if callable(resp) else resp
                                          for resp in responses[pattern]])

    # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    search_match = re.search(r"(–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫|–Ω–∞–π—Ç–∏|–∏—â–∏|–∏—Å–∫–∞—Ç—å|–Ω–∞–π–¥–∏—Ç–µ|–ø–æ–∏—â–∏)\s+(.+)", text)
    if search_match:
        query = search_match.group(2)
        webbrowser.open(f"https://www.google.com/search?q={query}")
        return f"–ò—â—É –≤ Google: {query}"

    # –ü–æ–≥–æ–¥–∞
    weather_match = re.search(r"–ø–æ–≥–æ–¥–∞\s+(.+)", text)
    if weather_match:
        city = weather_match.group(1)
        return get_weather(city)

    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    math_result = calculate_expression(text)
    if math_result is not None:
        return math_result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
    for pattern, response_options in responses.items():
        if re.search(pattern, text, re.IGNORECASE):
            match = re.search(pattern, text, re.IGNORECASE)
            selected = random.choice(response_options)
            if callable(selected):
                try:
                    return selected(match) if match else selected()
                except:
                    return selected()
            return selected

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return random.choice([
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?",
        "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å",
        "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É"
    ])


if __name__ == "__main__":
    print('–≠—Ç–æ –±–æ—Ç, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å –Ω–∏–º –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.')

    while True:
        try:
            user_input = input('–í—ã: ').strip()

            if not user_input:
                print("–ë–æ—Ç: –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                continue

            if user_input.lower() in ["–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]:
                response = random.choice([resp() if callable(resp) else resp
                                          for resp in responses[r"–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–≤—ã—Ö–æ–¥"]])
                print('–ë–æ—Ç:', response)
                log_conversation(user_input, response)
                break

            response = chatbot_response(user_input)
            print('–ë–æ—Ç:', response)
            log_conversation(user_input, response)

        except KeyboardInterrupt:
            print("\n–ë–æ—Ç: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print("–ë–æ—Ç: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            log_conversation(user_input, f"–û—à–∏–±–∫–∞: {str(e)}")